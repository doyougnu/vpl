* Vision
** Copy the compilation semantics of VSAT but apply them to a general purpose programming language
** This means that
*** Everything outside a choice should be compiled
*** Everything inside a choice should not be touched
*** The variational core, is a variational binary
*** The variational binary, is compiled through selection

* Platforms

** Racket

*** Plenty of options for implementation:

**** First class support for module

**** First class support for dynamic rebinding modules

**** First class support for compiler manipulation with linklets

***** The docs are a little ambiguous with this one though

**** First class support for fasl compilation which is platform independent

**** Possible implementation with impersonators and chaperones

** Gambit

*** Simpler than racket and less libraries

*** First class support for observability on the gambit vm

*** architecture agnostics

*** Gambit would allow the vpl to be changed _while_ running

** Common Lisp

*** first class support for fasl compilation

*** well documented also has plenty of libraries

*** better run-time abilities, plethora of compilation options

*** Offers lisp images which could be very powerful pure implementation

** Haskell

*** Would likely require a compiler extension

*** Not researched yet

** OCaml

*** Not researched yet

* Relevant reading

** https://web.archive.org/web/20170821214626/http://www2.parc.com/csl/groups/sda/projects/reflection96/docs/malenfant/malenfant.pdf

** https://j.mp/FarePhD

** the racket papers on chaperones and impersonators
